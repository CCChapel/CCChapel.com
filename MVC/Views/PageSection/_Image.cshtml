@using CMS.MacroEngine;
@using CMS.Helpers;
@using CMS.DocumentEngine.Types;
@using CCC.Helpers;

@model ImageSection

@{
    //Get Image for Background
    string imageUrl = "";
    string imagePositioning = "";
    string imageTextColor = "light";

    foreach (var image in Model.Fields.SectionImages
                    .Where(i => (i.ClassName == Background.CLASS_NAME) ||
                                (i.ClassName == MacroLink.CLASS_NAME))
                    .OrderBy(i => Guid.NewGuid()))
    {
        Background background = new Background();
        bool imageOkay = false;

        try
        {
            if (image.ClassName == Background.CLASS_NAME)
            {
                background = (Background)image;
                imageOkay = true;
            }
            else if (image.ClassName == MacroLink.CLASS_NAME)
            {
                var macroLink = (MacroLink)image;

                //Check that Macro Link's Target Class Matches
                if (macroLink.Fields.PageClassName == Background.CLASS_NAME)
                {
                    //Resolve Macro Expression
                    Guid guid = CMS.Helpers.ValidationHelper.GetGuid(
                        MacroResolver.Resolve(macroLink.Fields.MacroExpression),
                        new Guid());

                    //Get Background
                    background = BackgroundProvider.GetBackground(guid, SiteHelpers.SiteCulture, SiteHelpers.SiteName);

                    imageOkay = true;
                }
            }

            if (imageOkay == true)
            {
                if ((DocumentHelpers.ResolveMacroCondition(background.ImageMacroCondition) == true))
                {
                    imageUrl = Url.Kentico().Attachment(background.Fields.ImageFile);
                    imagePositioning = background.Fields.ImagePositioning;
                    imageTextColor = background.Fields.ImageTextColor;

                    break;
                }
            }
        }
        catch (NullReferenceException ex)
        {
            //Oh well... Image isn't real
        }

    }
}

<div class="@Model.Fields.SectionCssClass [ content-section image @imageTextColor @Model.SectionHeight @{ if (Model.Fields.SectionIsParallax) { <text>parallax</text> } } ] [ center-vertically ] [ grid__item one-whole ] [ @imagePositioning ]" style="background-image: url('@imageUrl');@Model.Fields.SectionStyles">
    @{
        if (Model.SectionIncludeWrapper)
        {
            @:<div class="content-wrapper">
        }
    }

    @Html.Raw(
        Html.Kentico().ResolveUrls(
            Model.SectionContent.ProcessForOutput()))
    @*<p>@Url.Kentico().Attachment(background.Fields.ImageFile)</p>*@

    @{
        if (Model.SectionIncludeWrapper)
        {
            @:</div>
        }
    }
</div>

@Html.Raw(Model.Fields.SectionJavaScript)
